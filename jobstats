#!/usr/bin/env python3

import argparse
import config
from jobstats import JobStats

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Show job utilization.")
    parser.add_argument('job', metavar='jobid', nargs='+',
                    help='Job numbers to lookup')
    parser.add_argument("-c", "--cluster", default=None,
                    help="Specify cluster instead of relying on default on the current machine.")
    parser.add_argument("-j", "--json", action='store_true', default=False,
                    help="Produce row data in json format, with no summary.")
    parser.add_argument("-b", "--base64", action='store_true', default=False,
                    help="Produce row data in json format, with no summary and also gzip and encode it in base64 output for db storage.")
    parser.add_argument("-d", "--debug", action='store_true', default=False,
                    help="Output debugging information.")
    parser.add_argument("-S", "--syslog", action='store_true', default=False,
                    help="Output debugging information to syslog.")
    parser.add_argument("-s", "--simple", action='store_true', default=False,
                    help="Output information using a simple format.")
    parser.add_argument("-f", "--force", action='store_true', default=False,
                    help="Force recalculation without using cached data from the database.")
    parser.add_argument("-n", "--no-color", action='store_true', default=False,
                    help="Output information without colorization.")
    args = parser.parse_args()

    # check for the blessed module
    try:
        from blessed import Terminal
        blessed_is_available = True
    except ModuleNotFoundError:
        blessed_is_available = False

    if blessed_is_available:
        term = Terminal()
        txt_bold   = f"{term.bold}"
        txt_red    = f"{term.red}"
        txt_normal = f"{term.normal}"
        color = ("", "", "") if args.no_color else (txt_bold, txt_red, txt_normal)
    else:
        color = ("", "", "")

    for jobid in args.job:
        stats = JobStats(jobid=jobid,
                         cluster=args.cluster,
                         prom_server=config.PROM_SERVER,
                         debug=args.debug,
                         debug_syslog=args.syslog,
                         force_recalc=args.force,
                         simple=args.simple,
                         color=color)
        if args.json or args.base64:
            print(stats.report_job_json(args.base64))
        else:
            stats.report_job()
